// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"

	zero "gopkg.in/guregu/null.v4/zero"
)

type PostType string

const (
	PostTypeBlog   PostType = "blog"
	PostTypeNews   PostType = "news"
	PostTypeValue2 PostType = " "
)

func (e *PostType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostType(s)
	case string:
		*e = PostType(s)
	default:
		return fmt.Errorf("unsupported scan type for PostType: %T", src)
	}
	return nil
}

type NullPostType struct {
	PostType PostType `json:"post_type"`
	Valid    bool     `json:"valid"` // Valid is true if PostType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostType) Scan(value interface{}) error {
	if value == nil {
		ns.PostType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostType), nil
}

type Category struct {
	ID           int64 `json:"id"`
	Title        int32 `json:"title"`
	PostCount    int32 `json:"post_count"`
	ArticleCount int32 `json:"article_count"`
}

type Comment struct {
	ID        int64    `json:"id"`
	Comment   string   `json:"comment"`
	ParentID  zero.Int `json:"parent_id"`
	UserID    int32    `json:"user_id"`
	LikeCount int32    `json:"like_count"`
	PostID    int32    `json:"post_id"`
}

type Post struct {
	ID           int64     `json:"id"`
	UserID       int32     `json:"user_id"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	CategoryID   int32     `json:"category_id"`
	PostType     PostType  `json:"post_type"`
	LikeCount    int32     `json:"like_count"`
	CommentCount int32     `json:"comment_count"`
	ViewCount    int32     `json:"view_count"`
	PublishedAt  zero.Time `json:"published_at"`
	CreatedAt    zero.Time `json:"created_at"`
	UpdatedAt    zero.Time `json:"updated_at"`
	DeletedAt    zero.Time `json:"deleted_at"`
}

type User struct {
	ID         int64     `json:"id"`
	FullName   string    `json:"full_name"`
	UserAvatar int32     `json:"user_avatar"`
	CountPosts int32     `json:"count_posts"`
	Email      string    `json:"email"`
	Pasword    string    `json:"pasword"`
	CreatedAt  zero.Time `json:"created_at"`
	UpdatedAt  zero.Time `json:"updated_at"`
	DeletedAt  zero.Time `json:"deleted_at"`
}
