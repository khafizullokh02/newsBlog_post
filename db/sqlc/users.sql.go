// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    full_name,
    user_avatar,
    count_posts,
    email,
    pasword
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, full_name, user_avatar, count_posts, email, pasword, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	FullName   string `json:"full_name"`
	UserAvatar int32  `json:"user_avatar"`
	CountPosts int32  `json:"count_posts"`
	Email      string `json:"email"`
	Pasword    string `json:"pasword"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FullName,
		arg.UserAvatar,
		arg.CountPosts,
		arg.Email,
		arg.Pasword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.UserAvatar,
		&i.CountPosts,
		&i.Email,
		&i.Pasword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, user_avatar, count_posts, email, pasword, created_at, updated_at, deleted_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.UserAvatar,
		&i.CountPosts,
		&i.Email,
		&i.Pasword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, user_avatar, count_posts, email, pasword, created_at, updated_at, deleted_at
FROM users
WHERE full_name = $1
ORDER BY id DESC
LIMIT $3
OFFSET $2
`

type ListUsersParams struct {
	FullName string `json:"full_name"`
	Offset   int32  `json:"offset"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.FullName, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.UserAvatar,
			&i.CountPosts,
			&i.Email,
			&i.Pasword,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    full_name = COALESCE($1, full_name),
    user_avatar = COALESCE($2, user_avatar),
    count_posts = COALESCE($3, count_posts),
    email = COALESCE($4, email),
    pasword = COALESCE($5, pasword)
WHERE id = $6
RETURNING id, full_name, user_avatar, count_posts, email, pasword, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	FullName   zero.String `json:"full_name"`
	UserAvatar zero.Int    `json:"user_avatar"`
	CountPosts zero.Int    `json:"count_posts"`
	Email      zero.String `json:"email"`
	Pasword    zero.String `json:"pasword"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FullName,
		arg.UserAvatar,
		arg.CountPosts,
		arg.Email,
		arg.Pasword,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.UserAvatar,
		&i.CountPosts,
		&i.Email,
		&i.Pasword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
