// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: category.sql

package db

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (
    title,
    post_count,
    article_count
)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, title, post_count, article_count
`

type CreateCategoryParams struct {
	Title        int32 `json:"title"`
	PostCount    int32 `json:"post_count"`
	ArticleCount int32 `json:"article_count"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Title, arg.PostCount, arg.ArticleCount)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PostCount,
		&i.ArticleCount,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, title, post_count, article_count
FROM category
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PostCount,
		&i.ArticleCount,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, title, post_count, article_count
FROM category
ORDER BY id DESC
LIMIT $2
OFFSET $1
`

type ListCategoriesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PostCount,
			&i.ArticleCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET
    title = COALESCE($1, title),
    post_count = COALESCE($2, post_count),
    article_count = COALESCE($3, article_count) 
WHERE id = $4
RETURNING id, title, post_count, article_count
`

type UpdateCategoryParams struct {
	Title        zero.Int `json:"title"`
	PostCount    zero.Int `json:"post_count"`
	ArticleCount zero.Int `json:"article_count"`
	ID           int64    `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Title,
		arg.PostCount,
		arg.ArticleCount,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PostCount,
		&i.ArticleCount,
	)
	return i, err
}
