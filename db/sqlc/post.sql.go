// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (
    user_id,
    title,
    content,
    category_id,
    post_type,
    like_count,
    comment_count,
    view_count,
    published_at,
    created_at,
    updated_at,
    deleted_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12
)
RETURNING id, user_id, title, content, category_id, post_type, like_count, comment_count, view_count, published_at, created_at, updated_at, deleted_at
`

type CreatePostParams struct {
	UserID       int32     `json:"user_id"`
	Title        string    `json:"title"`
	Content      string    `json:"content"`
	CategoryID   int32     `json:"category_id"`
	PostType     PostType  `json:"post_type"`
	LikeCount    int32     `json:"like_count"`
	CommentCount int32     `json:"comment_count"`
	ViewCount    int32     `json:"view_count"`
	PublishedAt  zero.Time `json:"published_at"`
	CreatedAt    zero.Time `json:"created_at"`
	UpdatedAt    zero.Time `json:"updated_at"`
	DeletedAt    zero.Time `json:"deleted_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.CategoryID,
		arg.PostType,
		arg.LikeCount,
		arg.CommentCount,
		arg.ViewCount,
		arg.PublishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.PostType,
		&i.LikeCount,
		&i.CommentCount,
		&i.ViewCount,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM post
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, user_id, title, content, category_id, post_type, like_count, comment_count, view_count, published_at, created_at, updated_at, deleted_at
FROM post
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.PostType,
		&i.LikeCount,
		&i.CommentCount,
		&i.ViewCount,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, user_id, title, content, category_id, post_type, like_count, comment_count, view_count, published_at, created_at, updated_at, deleted_at
FROM post
ORDER BY id DESC
LIMIT $2
OFFSET $1
`

type ListPostsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CategoryID,
			&i.PostType,
			&i.LikeCount,
			&i.CommentCount,
			&i.ViewCount,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE post
SET
    user_id = COALESCE($1, user_id),
    title = COALESCE($2, title),
    content = COALESCE($3, content),
    category_id = COALESCE($4, category_id),
    post_type = COALESCE($5, post_type),
    like_count = COALESCE($6, like_count)
WHERE id = $7
RETURNING id, user_id, title, content, category_id, post_type, like_count, comment_count, view_count, published_at, created_at, updated_at, deleted_at
`

type UpdatePostParams struct {
	UserID     zero.Int    `json:"user_id"`
	Title      zero.String `json:"title"`
	Content    zero.String `json:"content"`
	CategoryID zero.Int    `json:"category_id"`
	PostType   zero.String `json:"post_type"`
	LikeCount  zero.Int    `json:"like_count"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.CategoryID,
		arg.PostType,
		arg.LikeCount,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CategoryID,
		&i.PostType,
		&i.LikeCount,
		&i.CommentCount,
		&i.ViewCount,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
