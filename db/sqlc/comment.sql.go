// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comment.sql

package db

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comment (
    comment,
    parent_id,
    user_id,
    like_count,
    post_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, comment, parent_id, user_id, like_count, post_id
`

type CreateCommentParams struct {
	Comment   string   `json:"comment"`
	ParentID  zero.Int `json:"parent_id"`
	UserID    int32    `json:"user_id"`
	LikeCount int32    `json:"like_count"`
	PostID    int32    `json:"post_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.Comment,
		arg.ParentID,
		arg.UserID,
		arg.LikeCount,
		arg.PostID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.ParentID,
		&i.UserID,
		&i.LikeCount,
		&i.PostID,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comment
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, comment, parent_id, user_id, like_count, post_id
FROM comment
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.ParentID,
		&i.UserID,
		&i.LikeCount,
		&i.PostID,
	)
	return i, err
}

const listComments = `-- name: ListComments :many
SELECT id, comment, parent_id, user_id, like_count, post_id
FROM comment
ORDER BY id DESC
LIMIT $2
OFFSET $1
`

type ListCommentsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, listComments, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.ParentID,
			&i.UserID,
			&i.LikeCount,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comment
SET
    comment = COALESCE($1, comment),
    parent_id = COALESCE($2, parent_id),
    user_id = COALESCE($3, user_id),
    like_count = COALESCE($4, like_count),
    post_id = COALESCE($5, post_id)
WHERE id = $6
RETURNING id, comment, parent_id, user_id, like_count, post_id
`

type UpdateCommentParams struct {
	Comment   zero.String `json:"comment"`
	ParentID  zero.Int    `json:"parent_id"`
	UserID    zero.Int    `json:"user_id"`
	LikeCount zero.Int    `json:"like_count"`
	PostID    zero.Int    `json:"post_id"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment,
		arg.Comment,
		arg.ParentID,
		arg.UserID,
		arg.LikeCount,
		arg.PostID,
		arg.ID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.ParentID,
		&i.UserID,
		&i.LikeCount,
		&i.PostID,
	)
	return i, err
}
